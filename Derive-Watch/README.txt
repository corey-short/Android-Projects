DériveWatch

You have been contracted to implement a design for a new urban navigation phone/watch application.  It is based on the idea of the dérive (Links to an external site.) which is a concept developed by the Situationists (Links to an external site.) where one "drifts" through a city in an unplanned way subconsciously directed by the surrounding architecture and geography with the ultimate goal of encountering an entirely new and authentic experience. While the client does not want to implement an entirely unplanned wandering in a city, they do want their app to include a sort of semi-controlled drifting towards a final destination as they feel no such app offers such an experience.

The client has identified several required features that are critical to differentiating their app from the current designs.  Like many navigation apps users will need to select a final destination and route to it.  However, there are several new twists to this ordinary design.  The client has made the following requests:

The main user must be presented with a list of categories (food, cafe, bar, park, art, shopping, etc). 
The main user selects a single category which then presents a list of actual locations (Sightglass, Four Barrel, Ritual, Blue Bottle, etc).
The main user can select the final destination (i.e. Sightglass)
Other users of the DériveWatch app can mark themselves as "curious" or "offline".  When a user is "curious" they are making themselves available to meet up invitation requests from their friends.
The main user that has selected a location can then see a list of friends that are "curious" and can select a subset of their "curious" friends from the list that they want to invite to the final destination.  The "curious" users do not know the final destination.
The main user then selects the desired arrival time.  While all the invited users' locations are not exposed to the users, the app does internally have this information and is able to calculate the earliest available time for all users to travel from their current locations to the desired destination (the app uses walking, biking, and public transportation but not driving a personal car).  The app then inserts a 10 min buffer.  For example if you invite four friends and their earliest you can all arrive at the location is 25 minutes the app will not allow the user to set the time of arrival to anything less than 35 min from the current time.  However, in most usage the main user will increase the time to destination by significantly more time than 10 min (this is to allow more time for all users to "drift").  This feature must be provided for pushing back the arrival time to gain more dérive time.
The main user is able to select (on/off or degree of desirability) for a number of features such as (scenic, hilly, grass, unexpected, dangerous, funny, bikes, touristy, scary, odor, locals, abandoned, alleys, etc).  You should interpret exactly what terms to use and how to implement them visually within the interface. This may also work as an individual setting for each user rather than only the main user.  The client is also leaving this part, the visual design and type of settings, of the design fairly open.  Should it be a list, checkboxes, colors, visual, tilting, shapes, sounds, etc.?
The other invited "curious" users each receive a request to get together and confirm or deny the request.  Users that accept the request will continue on. They are not told where just to accept or deny the request.
The DériveWatch app uses each individual's current location, feature desirability settings, final destination, and arrival time to plot a route to the final destination.  This routing does not reveal the final destination to the users (except the organizing user who has selected the location).  The mapping/navigation should only be shown on the user's watch (i.e. users cannot browse the full route on their phone).  You will need to design a way to show the navigation such that the final destination is not revealed (until the end, of course - i.e. they should actually know they arrived at the final destination).  One approach is to just show the next step of the navigation.  You will likely explore other designs and be more creative.  Users will also need to know the time to final arrival.  However, this does not have to be literal -- for example it could be "arrival in" 2 min, 4 right turns, 2 stoplights, 2,385 steps, or a more visual cue.  However, do realize that the routing is not shortest path.  This app "creatively" routes you through a city such that everyone arrives at the same time.  It allow you to "get lost" for a bit and still make your dinner reservation together.  It allows your to drift around and find new places in a familiar city.  It allows a group of friends to collectively explore a new city in a new way and be guaranteed to meet up and talk about it over drinks at a bar. For example, it may route you in a long circuitous route across some parks or through some alleys or by some street vendors or bunched with tourists (all depending on the desirability settings and extra time).  Everyone will get a different route so even if you are walking with your friend it will split you up but sill make you arrive to the same location at the same time.
How should this experience be designed?  While your app and watch UI design must accommodate the client's requirements as specified above, much of the details of the design are left for you to develop.  You can be literal with lists or visual with icons, shapes, or colors.  

Framer.js will allow you to mockup and screen capture your interactions.  More importantly you will be able to easily explore various animation, transition, and visual design choices for navigating the various friends, locations, desirability features, and navigation concepts.  You will hand in a video (Hackster) along with a subset of selected screenshots (Hackster) and your Framer.js code (.framer folder via Bitbucket, shared with cs160 staff account).

This project is worth 30 points and will be graded as follows:

Did the resulting application demonstrate the full required functionality as described (15 points) (fractional credit for missing features)

Does final design use good visual design rules in terms of fonts, color selection, layout, whitespace, etc (5 points)

Does final design use good interaction design techniques?  Does it include good use of transitions, animations, etc. (5 points)

Is there a consistent design language used throughout the user experience and across the overall design (5 points)

 

Project variation 1 (still for full credit): No one knows the final destination, just the category (i.e. Mexican food in an hour), and all are routed to the same location.   

Project variation 2 (still for full credit): Only the main organizers desirability features are used rather than individuals.
